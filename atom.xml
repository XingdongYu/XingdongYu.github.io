<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RoboG&#39;s Blog</title>
  
  <subtitle>Welcome to my blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-01T03:22:21.613Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XingdongYu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RecyclerView菜单全屏解决方案</title>
    <link href="http://yoursite.com/2019/02/01/recyclerview-menu/"/>
    <id>http://yoursite.com/2019/02/01/recyclerview-menu/</id>
    <published>2019-02-01T03:16:31.600Z</published>
    <updated>2019-02-01T03:22:21.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前菜单界面采用RecyclerView + GridLayoutManager实现，最大的好处是修改样式十分方便。但是GridLayoutManager只能在单方向撑满屏幕，如果在有限个item内横向竖向都撑满该怎么做呢？<br><a id="more"></a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果是菜单全屏，那么意味着当前界面展示了所有itemView，完全可以抛开缓存机制模仿GridLayoutManager重新写一个LayoutManager。但总觉得还是太麻烦，那就动态计算itemView的高度吧（以下均针对GridLayoutManager横向情况）。</p><p>创建一个Adapter，我们重点关注onBindViewHolder函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var data = emptyList&lt;String&gt;()</span><br><span class="line">    set(value) &#123;</span><br><span class="line">        field = value</span><br><span class="line">        notifyDataSetChanged()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> var itemHeight = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">updateItemHeight</span><span class="params">(height: Int)</span> </span>&#123;</span><br><span class="line">    itemHeight = height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">override fun <span class="title">onBindViewHolder</span><span class="params">(holder: MenuViewHolder, position: Int)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    val s = data[position]</span><br><span class="line">    holder.tvTitle.text = s</span><br><span class="line"></span><br><span class="line">    val layoutParams = holder.itemView.layoutParams</span><br><span class="line">    <span class="comment">// 高度可能有盈余，减1保证不可滑动</span></span><br><span class="line">    layoutParams.height = itemHeight - <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在onBindViewHolder函数中，获取到layoutParams，并给height撑满界面时所需的高度即可。<br>再看一下Activity中计算itemHeight的方法，也十分简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> fun <span class="title">measureHeight</span><span class="params">()</span>: Int </span>&#123;</span><br><span class="line">    val row: Int = <span class="keyword">if</span> (<span class="number">0</span> == menuData.size % gridLayoutManager.spanCount) &#123;</span><br><span class="line">        menuData.size / gridLayoutManager.spanCount</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        menuData.size / gridLayoutManager.spanCount + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> recyclerView.height / row</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果item的个数能整除列数，意味着正好撑满最后一行，因此行数为menuData.size / gridLayoutManager.spanCount；如果不能整除就加1。之后设置一下Adapter。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">btAdd.setOnClickListener &#123;</span><br><span class="line">    menuData.add(<span class="string">"第$&#123;count++&#125;项"</span>)</span><br><span class="line">    menuAdapter.run &#123;</span><br><span class="line">        data = menuData</span><br><span class="line">        updateItemHeight(measureHeight())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后看一下效果图：<br><img src="/images/recyclerview-menu/sample.gif" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;目前菜单界面采用RecyclerView + GridLayoutManager实现，最大的好处是修改样式十分方便。但是GridLayoutManager只能在单方向撑满屏幕，如果在有限个item内横向竖向都撑满该怎么做呢？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android批量引用资源文件</title>
    <link href="http://yoursite.com/2018/11/05/android-resource-get/"/>
    <id>http://yoursite.com/2018/11/05/android-resource-get/</id>
    <published>2018-11-05T03:50:27.980Z</published>
    <updated>2018-11-05T04:33:25.681Z</updated>
    
    <content type="html"><![CDATA[<p>每次和同事吃饭的时候都会因为不知道吃什么而纠结好久，于是自己做了个小应用帮忙做选择。由于应用功能过于简单，想着加点好玩的东西上去，这时候，问题来了。<br><a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>应用通过随机一个position，让RecyclerView滑动到某个餐馆的位置，我要做的是在每个RecyclerView的item上依次加gif每一帧的图片，达到一个逐帧动画的效果。由于图片放在资源文件中（50张），这意味着我要手动添加50张图片文件资源的id于一个list，这也太麻烦了，我肯定不会干。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>等我累死累活50个添加完，我脑海中出现了某个想法：平时我们获取状态栏的高度是怎么获取的？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var result = <span class="number">0</span></span><br><span class="line">val resourceId = resources.getIdentifier(<span class="string">"status_bar_height"</span>, <span class="string">"dimen"</span>, <span class="string">"android"</span>)</span><br><span class="line"><span class="keyword">if</span> (resourceId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    result = resources.getDimensionPixelSize(resourceId)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个getIdentifier函数就有说法了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIdentifier</span><span class="params">(String name, String defType, String defPackage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mResourcesImpl.getIdentifier(name, defType, defPackage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>源码的解释是”Return a resource identifier for the given resource name”，大意是给一个资源的名字，会返回该资源的id。我们看一下入参：name(资源名称)、defType(资源类型)以及defPackage(包名)。<br>我们按此方法获取一下图片资源的id，看和R.xxx.xxx的方式获取的值是否一致。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Log.d(TAG, <span class="string">"通过R文件获取 -&gt; $&#123;R.drawable.man1&#125;"</span>)</span><br><span class="line">val resourceId = resources.getIdentifier(<span class="string">"man1"</span>, <span class="string">"drawable"</span>, <span class="string">"com.yxd.thatdice"</span>)</span><br><span class="line">Log.d(TAG, <span class="string">"通过getIdentifier获取 -&gt; $resourceId"</span>)</span><br></pre></td></tr></table></figure></p><p><img src="/images/android-resource-get/get_resourceId.png" alt="image"><br>诶，一致的，那就好办了，我们可以通过如下方式去获取一个资源文件的list(图片以man1.png，man2.png…的方式命名):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> val DRAWABLE_TYPE = <span class="string">"drawable"</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> val PACKAGE_NAME = <span class="string">"com.yxd.thatdice"</span></span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">getManList</span><span class="params">(context: Context)</span>: List&lt;Int&gt; </span>&#123;</span><br><span class="line">    val manList = ArrayList&lt;Int&gt;(<span class="number">50</span>)</span><br><span class="line">    <span class="keyword">for</span> (i in <span class="number">1</span>..<span class="number">50</span>) &#123;</span><br><span class="line">        manList.add(getResourceId(context, <span class="string">"man$i"</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> manList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">getResourceId</span><span class="params">(context: Context, name: String)</span>: Int </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> context.resources.getIdentifier(name, DRAWABLE_TYPE, PACKAGE_NAME)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后看一下效果，录制的时候有丢帧，就着看了:<br><img src="/images/android-resource-get/sample_record.gif" alt="image"><br>至于效率问题，我也不敢说这种动态获取的方式一定会比直接从R文件读取低，或者低多少，这个还有待深入研究。至少从50张图片的量来看，可忽略不计。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次和同事吃饭的时候都会因为不知道吃什么而纠结好久，于是自己做了个小应用帮忙做选择。由于应用功能过于简单，想着加点好玩的东西上去，这时候，问题来了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>AIDL中的方法名陷阱</title>
    <link href="http://yoursite.com/2018/08/17/aidl-methodname-trap/"/>
    <id>http://yoursite.com/2018/08/17/aidl-methodname-trap/</id>
    <published>2018-08-17T01:45:24.890Z</published>
    <updated>2020-04-04T06:06:58.528Z</updated>
    
    <content type="html"><![CDATA[<p>前些日子在调试AIDL时出现了客户端与服务端方法调用不一致的情况。由于之前AIDL开发经验不足，这个问题还是折腾了一会儿，在此记录。<br><a id="more"></a></p><h2 id="场景重现"><a href="#场景重现" class="headerlink" title="场景重现"></a>场景重现</h2><p>在客户端和服务端创建相同的AIDL文件，并且定义两个方法A和B，均返回String以做测试:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMyAidlInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">methodA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">methodB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>服务端的实现如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IMyAidlInterface.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"method A from service"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">methodB</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"method B from service"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端调用如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IMyAidlInterface mInterface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName componentName, IBinder iBinder)</span> </span>&#123;</span><br><span class="line">        mInterface = IMyAidlInterface.Stub.asInterface(iBinder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName componentName)</span> </span>&#123;</span><br><span class="line">        mInterface = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performA</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String resultA = mInterface.methodA();</span><br><span class="line">        Log.d(TAG, <span class="string">"执行A -&gt; "</span> + resultA);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performB</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String resultB = mInterface.methodB();</span><br><span class="line">        Log.d(TAG, <span class="string">"执行B -&gt; "</span> + resultB);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>依次执行方法A和B，日志如下:<br><img src="/images/aidl-methodname-trap/normal_execute.png" alt="image"><br>没问题，按预期的结果返回了。<br>后来由于业务的变动，在服务端的AIDL中增加了测试方法，客户端不变:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 服务端AIDL</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMyAidlInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">methodA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">methodB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端实现</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IMyAidlInterface.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"test from service"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"method A from service"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">methodB</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"method B from service"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时在客户端依次执行方法A和B，发现结果竟变成了这样:<br><img src="/images/aidl-methodname-trap/add_test_execute.png" alt="image"><br>客户端调用methodA()，服务端执行了test()；客户端调用methodB()，服务端执行了methodA()，服务端竟然没有按客户端调用的方法名执行，而是按顺序执行的。</p><h2 id="原因探究"><a href="#原因探究" class="headerlink" title="原因探究"></a>原因探究</h2><p>我们先看一下AIDL调用过程（底层暂且不表），以上述正常情况的调用为例。mInterface通过IMyAidlInterface.Stub的asInterface方法得到:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mInterface = IMyAidlInterface.Stub.asInterface(iBinder);</span><br></pre></td></tr></table></figure></p><p>入参类型为IBinder，由于上述的客户端和服务端为两个应用不在一个进程，iBinder为远端service中的Binder代理(即BinderProxy)。看一下asInterface方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> com.robog.aidldemo.<span class="function">IMyAidlInterface <span class="title">asInterface</span><span class="params">(android.os.IBinder obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((obj == <span class="keyword">null</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class="line">    <span class="keyword">if</span> (((iin != <span class="keyword">null</span>) &amp;&amp; (iin <span class="keyword">instanceof</span> com.robog.aidldemo.IMyAidlInterface))) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((com.robog.aidldemo.IMyAidlInterface) iin);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> com.robog.aidldemo.IMyAidlInterface.Stub.Proxy(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果同进程直接返回IInterface，即当前的Stub对象。不在一个进程返回的是IMyAidlInterface.Stub.Proxy(obj)。看一下静态内部类Proxy的构造方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> android.os.IBinder mRemote;</span><br><span class="line"></span><br><span class="line">Proxy(android.os.IBinder remote) &#123;</span><br><span class="line">    mRemote = remote;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着执行mInterface.methodA()，即调用Proxy的methodA方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> java.lang.<span class="function">String <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">    android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class="line">    android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class="line">    java.lang.String _result;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class="line">        mRemote.transact(Stub.TRANSACTION_methodA, _data, _reply, <span class="number">0</span>);</span><br><span class="line">        _reply.readException();</span><br><span class="line">        _result = _reply.readString();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        _reply.recycle();</span><br><span class="line">        _data.recycle();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际上调用了mRemote(BinderProxy)的transact方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">transact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    Binder.checkParcel(<span class="keyword">this</span>, code, data, <span class="string">"Unreasonably large binder buffer"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mWarnOnBlocking &amp;&amp; ((flags &amp; FLAG_ONEWAY) == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="comment">// For now, avoid spamming the log by disabling after we've logged</span></span><br><span class="line">        <span class="comment">// about this interface at least once</span></span><br><span class="line">        mWarnOnBlocking = <span class="keyword">false</span>;</span><br><span class="line">        Log.w(Binder.TAG, <span class="string">"Outgoing transactions from this process must be FLAG_ONEWAY"</span>,</span><br><span class="line">                <span class="keyword">new</span> Throwable());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> tracingEnabled = Binder.isTracingEnabled();</span><br><span class="line">    <span class="keyword">if</span> (tracingEnabled) &#123;</span><br><span class="line">        <span class="keyword">final</span> Throwable tr = <span class="keyword">new</span> Throwable();</span><br><span class="line">        Binder.getTransactionTracker().addTrace(tr);</span><br><span class="line">        StackTraceElement stackTraceElement = tr.getStackTrace()[<span class="number">1</span>];</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_ALWAYS,</span><br><span class="line">                stackTraceElement.getClassName() + <span class="string">"."</span> + stackTraceElement.getMethodName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> transactNative(code, data, reply, flags);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tracingEnabled) &#123;</span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_ALWAYS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过调用native方法transactNative经过Framework以及Kernel层(有兴趣的同学可以参考<a href="http://gityuan.com/2016/09/04/binder-start-service/" target="_blank" rel="noopener">这篇文章</a>)，最后调用到service端onTransact方法的返回后才会执行结束。我们看一下service端IMyAidlInterface.Stub()中onTransact的实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">        <span class="keyword">case</span> INTERFACE_TRANSACTION: &#123;</span><br><span class="line">            reply.writeString(DESCRIPTOR);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> TRANSACTION_methodA: &#123;</span><br><span class="line">            data.enforceInterface(DESCRIPTOR);</span><br><span class="line">            java.lang.String _result = <span class="keyword">this</span>.methodA();</span><br><span class="line">            reply.writeNoException();</span><br><span class="line">            reply.writeString(_result);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> TRANSACTION_methodB: &#123;</span><br><span class="line">            data.enforceInterface(DESCRIPTOR);</span><br><span class="line">            java.lang.String _result = <span class="keyword">this</span>.methodB();</span><br><span class="line">            reply.writeNoException();</span><br><span class="line">            reply.writeString(_result);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，onTransact方法中会根据code值执行相应的方法，这些方法即为IMyAidlInterface.Stub()中实现的方法。<br>总结一下流程(省略底层):<br><img src="/images/aidl-methodname-trap/aidl_process.png" alt="image"><br>现在我们知道服务端会根据code值决定执行哪个方法，我们回过头看一下客户端传的code值:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int FIRST_CALL_TRANSACTION  = 0x00000001</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_methodA = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_methodB = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>该code值根据方法顺序依次加1，查看文件可以发现服务端的code值与之一致，此时方法调用没有问题。<br>再看一下服务AIDL文件中新增test方法后的code值:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_test = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">0</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_methodA = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TRANSACTION_methodB = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><p>此时客户端如果调用methodA(客户端code值为1)，服务端会调用code值为1的方法，即test方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>谷歌为Android的跨进程通讯设计了Binder机制，并提供了一套傻瓜式的接口（AIDL接口）让我们方便使用。AIDL的作用是为了简化代码的书写，如果不嫌麻烦我们完全可以抛弃AIDL，自己用代码实现。</li><li>Binder本身能读懂的是为int类型的code而非方法名，AIDL接口中的方法名申明只是为了我们方便使用，在内部会把这些接口请求翻译成Binder明白的请求。</li><li>如果为了测试需要在服务端增加方法，为了不影响客户端调用，方法最好加在最后。当然，尽量保持客户端与服务端的AIDL文件的一致性。</li><li>我们知道transact方法会等待onTransact方法返回后才会结束(onTransact方法一般在Binder_n线程中执行)。因此，客户端最好在线程中调用AIDL方法，不然一旦服务端的实现比较耗时不仅会影响体验，更可能会导致ANR。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://gityuan.com/2016/09/04/binder-start-service/" target="_blank" rel="noopener">彻底理解Android Binder通信架构</a></li><li><a href="https://blog.csdn.net/freekiteyu/article/details/70082302" target="_blank" rel="noopener">一篇文章了解相见恨晚的 Android Binder 进程间通讯机制</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前些日子在调试AIDL时出现了客户端与服务端方法调用不一致的情况。由于之前AIDL开发经验不足，这个问题还是折腾了一会儿，在此记录。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>打造一个可定制的Path动画</title>
    <link href="http://yoursite.com/2018/07/15/simple-line-view/"/>
    <id>http://yoursite.com/2018/07/15/simple-line-view/</id>
    <published>2018-07-15T07:11:14.602Z</published>
    <updated>2018-07-15T08:04:24.406Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>创建这个库并非是由于某个需求，而是以前在阅读OkHttp源码时深感设计的精妙，一直有一个模仿其责任链模式做一个自定义View(<a href="https://github.com/XingdongYu/SimpleLineView" target="_blank" rel="noopener">SimpleLineView</a>)的想法，一是为了好玩，二是希望能够抛砖引玉。<br><a id="more"></a></p><p>对于View的path动画，<a href="https://github.com/mcxtzhang/PathAnimView" target="_blank" rel="noopener">PathAnimView</a>甚至是<a href="https://github.com/airbnb/lottie-android" target="_blank" rel="noopener">Lottie</a>等都可以作出十分复杂酷炫的path动画。如果你的动画很复杂很酷炫，这个库可能就不太适合了。</p><p>当然，SimpleLineView也有自己的优势：<br>1、可随意定制路径<br>2、路径可以随意组合<br>3、支持progress</p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/images/simple-line-view/sample.gif" alt="image"></p><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p>1、自定义Painter（绘制相关接口），提供绘制功能。<br>2、RealChain实现了Chain接口并且维护了一个Painter的list，控制所有Painter依次执行绘制。<br>3、SimpleLineView维护了一个RealChain并且对外提供了方法，用于添加Painter以及控制动画的启动、停止和继续。在onDraw里调用当前Painter的onDraw方法实现真正的绘制。<br><img src="/images/simple-line-view/diagram.png" alt="image"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 圆形</span></span><br><span class="line">PixelPath circlePath = <span class="keyword">new</span> PixelPath(<span class="number">10</span>, <span class="number">10</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">100</span>&#125;);</span><br><span class="line">CirclePainter ciclePainter = <span class="keyword">new</span> RealCirclePainter(circlePath, <span class="number">1000</span>, -<span class="number">120</span>, <span class="number">360</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 矩形</span></span><br><span class="line">PixelPath squarePath = <span class="keyword">new</span> PixelPath(<span class="number">2</span>, <span class="number">2</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>&#125;);</span><br><span class="line">Painter squarePainter = <span class="keyword">new</span> SegmentPainter(squarePath, <span class="number">1000</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 添加路径</span></span><br><span class="line">mView.addPainter(ciclePainter).addPainter(squarePainter);</span><br><span class="line"><span class="comment">// 启动</span></span><br><span class="line">mView.start();</span><br><span class="line"><span class="comment">// 停止</span></span><br><span class="line">mView.stop();</span><br><span class="line"><span class="comment">// 继续</span></span><br><span class="line">mView.stick();</span><br></pre></td></tr></table></figure><h2 id="前期准备：PixelPath"><a href="#前期准备：PixelPath" class="headerlink" title="前期准备：PixelPath"></a>前期准备：PixelPath</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 横向像素</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mHorizontal;</span><br><span class="line"><span class="comment">// 纵向像素</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> mVertical;</span><br><span class="line"><span class="comment">// 路径经过的像素序号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] mPath;</span><br><span class="line">SimpleLineView将View的长和宽分成若干个格子，格子数由图片的像素决定，并且规定了path的序号（从<span class="number">1</span>开始，从左往右、从上到下依次递增<span class="number">1</span>）。</span><br></pre></td></tr></table></figure><p>例如，一张像素为4 * 4的图片<br><img src="/images/simple-line-view/pixel.png" alt="image"></p><p>这里的mHorizontal(横向格子数)和mVertical(纵向格子数)都为4。如果mPath为{1, 13, 16, 4}, 则绘制的图形为依次连接1，13，16，4的矩形(是否封闭可设置对应参数)。<br>如果图形的形状比较复杂，可以用PS打开图片，依次获取像素点的x和y值(这里x和y值的单位可以是像素、厘米等，但是计算时要与图像大小的单位一致)。假设图像宽为w, 高为h, 则当前点的值为 w * ( y - 1) + x。</p><h2 id="Painter接口"><a href="#Painter接口" class="headerlink" title="Painter接口"></a>Painter接口</h2><p>Painter接口主要提供了绘制的功能以及绘制时所需要的一些参数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Painter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取Path</span></span><br><span class="line">    <span class="function">PixelPath <span class="title">getPixelPath</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 时长</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">duration</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 路径是否闭合</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 设置Paint</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPaint</span><span class="params">(Paint paint)</span></span>;</span><br><span class="line">    <span class="comment">// 获取Paint</span></span><br><span class="line">    <span class="function">Paint <span class="title">getPaint</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 动画是否正在进行</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 开始动画</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">(Chain chain, Action action)</span></span>;</span><br><span class="line">    <span class="comment">// 停止动画</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 真正绘制的地方</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span></span>;</span><br><span class="line">    <span class="comment">// 进行下一笔绘画时，完整画完当前笔</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">completeDraw</span><span class="params">(Canvas canvas)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>onDraw方法和View的onDraw方法一样实现绘制。这里主要介绍一下completeDraw方法。由于每个Painter是依次绘制的，当下一个Painter进行绘制时，当前Pianter的形状也需要绘制，所以这里的completeDraw应该是当前Painter所要绘制的完整形状。这个方法会被当前Painter之后的每一个Painter调用。有点绕，看一下抽象类AbstractPainter的onDraw实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.完成之前Painter的绘制</span></span><br><span class="line">    drawPreviouse(canvas);</span><br><span class="line">    <span class="comment">// 2.绘制当前</span></span><br><span class="line">    realDraw(canvas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>drawPreviouse方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开始当前绘制前，先完成之前的绘制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> canvas</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawPreviouse</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (chain != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 当前Painter的index</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = chain.index();</span><br><span class="line">        <span class="keyword">final</span> List&lt;Painter&gt; painters = chain.painters();</span><br><span class="line">        <span class="comment">// 遍历所有之前的Painter，调用completeDraw方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">            <span class="keyword">final</span> Painter painter = painters.get(i);</span><br><span class="line">            painter.completeDraw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了方便说明，看一下AbstractPainter的一个子类RealCirclePainter的completeDraw和realDraw方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completeDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    canvas.drawArc(mRectF, mStartAngle, mSweepAngle, mUseCenter, paint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">realDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    canvas.drawArc(mRectF, mStartAngle, angle(), mUseCenter, paint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>mSweepAngle是所需扫过的角度，angle()为当前的角度大小，这个角度会随着时间递增，如此也就有了动画。<br>当然必须得看一下AbstractPainter的start方法，这个才是每个Painter开始的地方。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Chain chain, Action action)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//是否正在执行</span></span><br><span class="line">    mIsRunning = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.chain = chain;</span><br><span class="line">    <span class="comment">// 计算实际坐标点</span></span><br><span class="line">    pointList = action.fetchCoordinate(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 执行绘制</span></span><br><span class="line">    <span class="keyword">boolean</span> isFinish = performDraw(action);</span><br><span class="line">    mIsRunning = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 如果的确绘制完成，下一步</span></span><br><span class="line">    <span class="keyword">if</span> (isFinish) &#123;</span><br><span class="line">        chain.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>fetchCoordinate方法为绘制提供了坐标点，实现下文会介绍。之后通过performDraw方法来开始View的绘制，看一下AbstractPainter另一个子类SegmentPainter的performDraw方法实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performDraw</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 总路程</span></span><br><span class="line">    <span class="keyword">float</span> distance = Utils.calDistance(pointList, close());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pointList.size(); i++) &#123;</span><br><span class="line">        <span class="comment">// 省略若干代码          </span></span><br><span class="line">        <span class="keyword">while</span> (!current.isPathFinish()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isRunning()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 省略计算代码</span></span><br><span class="line">            <span class="comment">// 更新界面</span></span><br><span class="line">            action.update(<span class="keyword">this</span>);</span><br><span class="line">            SystemClock.sleep(INTERVAL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 保证图像都绘制</span></span><br><span class="line">        action.update(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在performDraw方法中会遍历PixelPoint的list，每隔INTERVAL时间调用Action接口的update方法更新View一次。</p><h2 id="Chain接口"><a href="#Chain接口" class="headerlink" title="Chain接口"></a>Chain接口</h2><p>Chain主要提供了调控的功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Chain</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">proceed</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 当前Painter的index</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">index</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 设置结束监听</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setOnFinishListener</span><span class="params">(OnFinishListener listener)</span></span>;</span><br><span class="line">    <span class="comment">// 所有的Painter</span></span><br><span class="line">    <span class="function">List&lt;Painter&gt; <span class="title">painters</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 结束接听接口</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">OnFinishListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onFinish</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看一下唯一实现类RealChain的proceed方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">proceed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mOnFinishListener != <span class="keyword">null</span> &amp;&amp; mIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        mOnFinishListener.onFinish(mIndex - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果index等于size就返回结束了</span></span><br><span class="line">    <span class="keyword">if</span> (mIndex == mPainters.size()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置progress时会不断调用该方法，为了避免不断创建RealChain对象，</span></span><br><span class="line">    <span class="comment">// 这里用了SparseArray保存所有已经创建的RealChain对象，key为index</span></span><br><span class="line">    Chain next = mChainPool.get(mIndex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        next = <span class="keyword">new</span> RealChain(mPainters, mIndex + <span class="number">1</span>, mAction);</span><br><span class="line">        next.setOnFinishListener(mOnFinishListener);</span><br><span class="line">        mChainPool.put(mIndex, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Painter painter = mPainters.get(mIndex);</span><br><span class="line">    painter.start(next, mAction);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里照搬了OkHttp，通过在RealChain的procced方法创建新的RealChain对象实现Painter的依次执行。由于Painter都是自定义的，所以当index等于所有Painter的size时return就好了，而OkHttp的最后一个Interceptor是没有创建Chain的。</p><h2 id="Action接口"><a href="#Action接口" class="headerlink" title="Action接口"></a>Action接口</h2><p>Action接口主要提供了计算当前path实际坐标点、通知更新View以及设置或者获取View的所需的参数的功能，这也是View需要实现的接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新view，实际调用的是&#123;<span class="doctag">@link</span> SimpleLineView#postInvalidate()&#125;方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> painter 该painter实现view的onDraw</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Painter painter)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外接口，设置progress后更新view</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> progress</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setProgress</span><span class="params">(<span class="keyword">int</span> progress)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * painter中通过调用该接口进行相应的绘制工作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getProgress</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过当前view执行的状态作出相应处理，可参考&#123;<span class="doctag">@link</span> com.robog.library.painter.TaskPainter#start(Chain, Action)&#125;方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得当前painter下所有点的实际坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> painter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;PixelPoint&gt; <span class="title">fetchCoordinate</span><span class="params">(Painter painter)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看一下fetchCoordinate方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;PixelPoint&gt; <span class="title">fetchCoordinate</span><span class="params">(Painter painter)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 同样的，这里避免频繁设置progress不断创建PixelPoint对象</span></span><br><span class="line">    List&lt;PixelPoint&gt; pixelPoints = mPointPool.get(painter);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pixelPoints != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pixelPoints;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pixelPoints = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Utils.setPoint(painter, pixelPoints, mWidth, mHeight);</span><br><span class="line">    mPointPool.put(painter, pixelPoints);</span><br><span class="line">    <span class="keyword">return</span> pixelPoints;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Utils的setPoint方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPoint</span><span class="params">(Painter painter, List&lt;PixelPoint&gt; pixelPoints, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先获取PixelPath</span></span><br><span class="line">    <span class="keyword">final</span> PixelPath pixelPath = painter.getPixelPath();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span>[] path = pixelPath.getPath();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> horizontal = pixelPath.getHorizontal();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> vertical = pixelPath.getVertical();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> target : path) &#123;</span><br><span class="line">        <span class="comment">// 如果PixelPath中点的序号超过总数则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (target &gt; horizontal * vertical) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Current coordinate ["</span> + target + <span class="string">"] is invalid!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 商</span></span><br><span class="line">        <span class="keyword">int</span> quotient = target / horizontal;</span><br><span class="line">        <span class="comment">// 余数</span></span><br><span class="line">        <span class="keyword">int</span> remainder = target % horizontal;</span><br><span class="line">        <span class="comment">// 实际的x和y坐标</span></span><br><span class="line">        <span class="keyword">float</span> x;</span><br><span class="line">        <span class="keyword">float</span> y;</span><br><span class="line">        <span class="comment">// x和y坐标的系数</span></span><br><span class="line">        <span class="keyword">float</span> coefficientX;</span><br><span class="line">        <span class="keyword">float</span> coefficientY;</span><br><span class="line">        <span class="keyword">if</span> (remainder != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 余数不为0时，这里的0.5是让实际坐标点位于方格中心点</span></span><br><span class="line">            coefficientX = remainder - <span class="number">0.5f</span>;</span><br><span class="line">            coefficientY = quotient + <span class="number">0.5f</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 余数为0时</span></span><br><span class="line">            coefficientX = horizontal - <span class="number">0.5f</span>;</span><br><span class="line">            coefficientY = quotient - <span class="number">0.5f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// width / horizontal为每个方格的宽度</span></span><br><span class="line">        <span class="comment">// 每个方格的宽度乘系数即为x的坐标</span></span><br><span class="line">        x = coefficientX *  width / horizontal;</span><br><span class="line">        <span class="comment">// 同理</span></span><br><span class="line">        y = coefficientY *  height / vertical;</span><br><span class="line"></span><br><span class="line">        PixelPoint pixelPoint = <span class="keyword">new</span> PixelPoint(x, y);</span><br><span class="line">        pixelPoints.add(pixelPoint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用的小学数学，看一下注释就好了。接着看一下update和onDraw方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Painter painter)</span> </span>&#123;</span><br><span class="line">    mCurrentPainter = painter;</span><br><span class="line">    postInvalidate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mCurrentPainter != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mCurrentPainter.onDraw(canvas);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在update中设置当前的painter，由于之前的操作在线程中，这里调用postInvalidate通知绘制，在View的onDraw方法中调用Painter的onDraw实现绘制。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>介绍完三个接口，整体的流程算是介绍完了，下面看一下两个功能型的Painter。</p><h3 id="DelayPainter"><a href="#DelayPainter" class="headerlink" title="DelayPainter"></a>DelayPainter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Chain chain, Action action)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Looper.myLooper() == Looper.getMainLooper()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Can't delay in the main thread!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(mTime);</span><br><span class="line">        chain.proceed();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在start方法通过Thread.sleep进行延时，如果当前方法在主线程执行就抛出异常。</p><h3 id="TaskPainter"><a href="#TaskPainter" class="headerlink" title="TaskPainter"></a>TaskPainter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(<span class="keyword">final</span> Chain chain, <span class="keyword">final</span> Action action)</span> </span>&#123;</span><br><span class="line">    mIsRunning = <span class="keyword">true</span>;</span><br><span class="line">    EXECUTOR.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 当status为start时重置point</span></span><br><span class="line">            <span class="keyword">if</span> (action.getStatus() == STATUS_START) &#123;</span><br><span class="line">                Utils.resetPointStatus(mPainterPool);</span><br><span class="line">            &#125;</span><br><span class="line">            chain.proceed();</span><br><span class="line">            mIsRunning = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当Painter有多个时，计算会耗费一定的时间，这里将chain的procced置于线程中，让后续的过程都在线程中执行以保证动画的流畅。并且，当start动画时，将PixelPoint的状态重置，保证下一次绘制是一个完整的过程。</p><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>1、图形较为复杂时，通过PS获取计算坐标点较为繁琐。<br>2、由于计算在子线程，绘制在主线程，当SimpleLineView设置progress过快时，上一步onDraw可能未完成，画面可能会闪动，暂时的解决方法是将此过程放入主线程。使用代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mView.addPainter(mCicleProgressPainter).addPainter(mHookProgressPainter).onMain();</span><br><span class="line">mView.setProgress(progress);</span><br></pre></td></tr></table></figure></p><p>OK，基本上介绍完了，如果有什么不足或者有什么问题欢迎指正！</p><p>项目地址：<a href="https://github.com/XingdongYu/SimpleLineView" target="_blank" rel="noopener">https://github.com/XingdongYu/SimpleLineView</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;创建这个库并非是由于某个需求，而是以前在阅读OkHttp源码时深感设计的精妙，一直有一个模仿其责任链模式做一个自定义View(&lt;a href=&quot;https://github.com/XingdongYu/SimpleLineView&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SimpleLineView&lt;/a&gt;)的想法，一是为了好玩，二是希望能够抛砖引玉。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Android中的缓存(一)——内存缓存</title>
    <link href="http://yoursite.com/2018/07/03/android-cache-1/"/>
    <id>http://yoursite.com/2018/07/03/android-cache-1/</id>
    <published>2018-07-03T10:44:16.162Z</published>
    <updated>2018-07-06T05:54:56.430Z</updated>
    
    <content type="html"><![CDATA[<p>内存缓存一般通过Map、List、链表等集合实现。每次将新建的对象存入集合，下一次需要新建时直接从集合中去取，这样避免了每次新建对象带来的开销以及内存占用。<br><a id="more"></a></p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>我们通过lifecycle包创建ViewModel时会通过这样的方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ViewModelProviders.of(activity).get(MyViewModel.class);</span><br></pre></td></tr></table></figure><p>看一下get方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">get</span><span class="params">(@NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class="line">    String canonicalName = modelClass.getCanonicalName();</span><br><span class="line">    <span class="keyword">if</span> (canonicalName == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Local and anonymous classes can not be ViewModels"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> get(DEFAULT_KEY + <span class="string">":"</span> + canonicalName, modelClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">get</span><span class="params">(@NonNull String key, @NonNull Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class="line">    ViewModel viewModel = mViewModelStore.get(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) viewModel;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (viewModel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> log a warning.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    viewModel = mFactory.create(modelClass);</span><br><span class="line">    mViewModelStore.put(key, viewModel);</span><br><span class="line">    <span class="keyword">return</span> (T) viewModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，ViewModel是通过mViewModelStore.get(key)去获取的，key为DEFAULT_KEY + “:” + canonicalName。如果为空就新建一个，然后存入mViewModelStore。如果下一次需要新建相同的ViewModel类，直接从mViewModelStore取就好了。看一下mViewModelStore:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class="line">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class="line">        <span class="keyword">if</span> (oldViewModel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            oldViewModel.onCleared();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> ViewModel <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ViewModelStore很简单，维护了一个HashMap，存储就是通过HashMap实现的，这也是我们常用的缓存策略。如果key为int，选用SparseArray更佳。之前写的库<a href="https://github.com/XingdongYu/SimpleLineView" target="_blank" rel="noopener">SimpleLineView</a>中因为会频繁创建Point，用了HashMap缓存Point。</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>我们通常在创建Message时不会通过new关键字来创建，而是通过Message.obtain()。<br>在看obtain方法之前我们先看一下Message中的recycleUnchecked方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Message sPool;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sPoolSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_POOL_SIZE = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycleUnchecked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flags = FLAG_IN_USE;</span><br><span class="line">        what = <span class="number">0</span>;</span><br><span class="line">        arg1 = <span class="number">0</span>;</span><br><span class="line">        arg2 = <span class="number">0</span>;</span><br><span class="line">        obj = <span class="keyword">null</span>;</span><br><span class="line">        replyTo = <span class="keyword">null</span>;</span><br><span class="line">        sendingUid = -<span class="number">1</span>;</span><br><span class="line">        when = <span class="number">0</span>;</span><br><span class="line">        target = <span class="keyword">null</span>;</span><br><span class="line">        callback = <span class="keyword">null</span>;</span><br><span class="line">        data = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sPoolSize &lt; MAX_POOL_SIZE) &#123;</span><br><span class="line">                next = sPool;</span><br><span class="line">                sPool = <span class="keyword">this</span>;</span><br><span class="line">                sPoolSize++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>我们知道每次Message处理完后，Looper会调用Message的recycleUnchecked方法来回收该Message对象。方法主要是将当前Message的参数重置，然后放入Message池——sPool(最多50个)。sPool为静态Message变量，将当前Message插到sPool所引用的Message对象前面，并且让sPool指向当前Message，如此就形成了一个缓存链。</p><p>再来看一下obtain方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sPool != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Message m = sPool;</span><br><span class="line">            sPool = m.next;</span><br><span class="line">            m.next = <span class="keyword">null</span>;</span><br><span class="line">            m.flags = <span class="number">0</span>; <span class="comment">// clear in-use flag</span></span><br><span class="line">            sPoolSize--;</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Message();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果sPool不为空，就返回sPool所引用的Message对象，并且让sPool指向它的next，即当前Message的下一个Message对象，即obtain方法下一次调用时所返回的对象。最近写的持久化日志库<a href="https://github.com/XingdongYu/PersistentLog" target="_blank" rel="noopener">PersistentLog</a>因为会频繁创建日志对象LogBean，参照Message写了缓存池。</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>目前没想到例子，想起来了再补🐶</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内存缓存一般通过Map、List、链表等集合实现。每次将新建的对象存入集合，下一次需要新建时直接从集合中去取，这样避免了每次新建对象带来的开销以及内存占用。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Hello Blog</title>
    <link href="http://yoursite.com/2018/07/02/hello-blog/"/>
    <id>http://yoursite.com/2018/07/02/hello-blog/</id>
    <published>2018-07-02T10:26:24.997Z</published>
    <updated>2018-07-03T04:49:18.439Z</updated>
    
    <content type="html"><![CDATA[<p>之前文章一直在cnblog上写，虽然不多却也花费了不少心思，所以会把这些文章陆续迁移过来。以后如果踩了什么坑或者有什么好玩的东西也都会放在这儿。希望能一直坚持下去。</p><p>2018.07.02<br>by: RoboG</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前文章一直在cnblog上写，虽然不多却也花费了不少心思，所以会把这些文章陆续迁移过来。以后如果踩了什么坑或者有什么好玩的东西也都会放在这儿。希望能一直坚持下去。&lt;/p&gt;
&lt;p&gt;2018.07.02&lt;br&gt;by: RoboG&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
